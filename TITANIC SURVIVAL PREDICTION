{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOfzDtfto3+qUzRNQkxRreu",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/adityaponnapalli05/CODESOFT/blob/main/TITANIC%20SURVIVAL%20PREDICTION\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
        "\n",
        "# Load and preprocess data\n",
        "df = pd.read_csv('/Titanic-Dataset.csv')\n",
        "df = df.copy()  # Ensures no chained assignments\n",
        "df['Age'] = df['Age'].fillna(df['Age'].median())\n",
        "df['Embarked'] = df['Embarked'].fillna(df['Embarked'].mode()[0])\n",
        "df.drop('Cabin', axis=1, inplace=True)\n",
        "df['Sex'] = df['Sex'].map({'male': 0, 'female': 1})\n",
        "df = pd.get_dummies(df, columns=['Embarked'])\n",
        "df.drop(['PassengerId', 'Name', 'Ticket'], axis=1, inplace=True)\n",
        "\n",
        "# Feature selection\n",
        "X = df.drop('Survived', axis=1)\n",
        "y = df['Survived']\n",
        "\n",
        "# Train-test split\n",
        "X_tr, X_te, y_tr, y_te = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Model training and prediction\n",
        "model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "model.fit(X_tr, y_tr)\n",
        "y_pred = model.predict(X_te)\n",
        "\n",
        "# Evaluation\n",
        "acc = accuracy_score(y_te, y_pred)\n",
        "print(f\"Accuracy: {acc * 100:.2f}%\")\n",
        "print(\"\\nClassification Report:\\n\", classification_report(y_te, y_pred))\n",
        "print(\"\\nConfusion Matrix:\\n\", confusion_matrix(y_te, y_pred))\n",
        "\n",
        "# Hyperparameter tuning\n",
        "param_grid = {'n_estimators': [100, 200, 300], 'max_depth': [None, 10, 20, 30], 'min_samples_split': [2, 5, 10]}\n",
        "grid_search = GridSearchCV(RandomForestClassifier(random_state=42), param_grid, cv=5, n_jobs=-1, verbose=2)\n",
        "grid_search.fit(X_tr, y_tr)\n",
        "print(f\"Best parameters: {grid_search.best_params_}\")\n",
        "\n",
        "# Final model with best params\n",
        "best_model = grid_search.best_estimator_\n",
        "best_model.fit(X_tr, y_tr)\n",
        "final_pred = best_model.predict(X_te)\n",
        "final_acc = accuracy_score(y_te, final_pred)\n",
        "print(f\"Final Model Accuracy: {final_acc * 100:.2f}%\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8UghdLkFOTv5",
        "outputId": "2a042ce1-a6c9-49e9-94c1-1ffdbfda6171"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 81.01%\n",
            "\n",
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.84      0.84      0.84       105\n",
            "           1       0.77      0.77      0.77        74\n",
            "\n",
            "    accuracy                           0.81       179\n",
            "   macro avg       0.80      0.80      0.80       179\n",
            "weighted avg       0.81      0.81      0.81       179\n",
            "\n",
            "\n",
            "Confusion Matrix:\n",
            " [[88 17]\n",
            " [17 57]]\n",
            "Fitting 5 folds for each of 36 candidates, totalling 180 fits\n",
            "Best parameters: {'max_depth': None, 'min_samples_split': 10, 'n_estimators': 200}\n",
            "Final Model Accuracy: 84.36%\n"
          ]
        }
      ]
    }
  ]
}